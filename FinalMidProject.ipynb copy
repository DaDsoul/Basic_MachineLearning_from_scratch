{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TERM PROJECT [ROBT407]\n",
    "\n",
    "by **Akezhan Mussa** and **Nurtas Ilyas**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Report of the Work\n",
    "First of all, the OOP was used to make our code reusable in future tasks. For example, the classes for Logistic Regression and SVM were implemented, so that each class has methods such as fit, plot, predict and error. Generally, almost all implementations are followed by functions, which also implies the reusablity of the work. \n",
    "\n",
    "**Now, taking into the consideration the results in all tasks:**\n",
    "    \n",
    "1) Performance of Linear Regression outweights Pocket PLA.\n",
    "    \n",
    "2) Both Error_train and Error_test of Logistic Regression with stochastic gradient decent converges with fluctuations as the stochastic gradient depends only on one sample derivative at each step. In addition, the optimal number of iteration step was recognized in range of 1000-1250. \n",
    "    \n",
    "3) Primal and Dual versions of SVM were implemented using cvxopt. QP solver, and the margins (Primal Case) and support vectors (dual case) were found after training. \n",
    "    \n",
    "4) Digits dataset was loaded from sklearn, which was used in training Linear and Logistic regression during cross_validation. Since, only binary classification was used to avoid high computational cost of one versus all algorithm and unbalanced data, only data for digits 5 and 7 were taken for training. For 100 fold cross validation, Logistic Regression average accuracy was 95.44%, where Linear regression average accuracy made up 94.51%. The fact that Logistic Regression is more efficient as opposed to Linear was proven. Among skelearn models (Logistic Regression, Linear Regression, Linear SVM and Polynomial Kernel SVM) the best regularization parameter(C) for each model was chosen using validation curves. The final selected model was Polynomial Kernel SVM with 97.89% accuracy.\n",
    "\n",
    "**Difficulties and Limitations:**\n",
    "\n",
    "1) Numpy broadcasting was not always applied, which may lead to higher computational cost.\n",
    "\n",
    "2) Limitations of Hardware didn't allow us to use Leave one Out cross validation.\n",
    "\n",
    "3) Computational cost of using polynomial features, forces us to choose regularization parameter for validation curve.\n",
    "\n",
    "**Contribution of each member:**\n",
    "\n",
    "1) Akezhan Mussa has mostly done Problem 1, 2 and Task 0, 1 from Problem 4\n",
    "\n",
    "2) Nurtas Ilyas has mostly done Problem 3 and Task 2 from Problem 4\n",
    "\n",
    "3) Each member tried to apply OOP and functions for making the code to be reusable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn import svm\n",
    "import numpy as np\n",
    "import math\n",
    "import random\n",
    "from numpy.linalg import inv\n",
    "from numpy.linalg import pinv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_data(r, c):\n",
    "    X = np.random.rand(r, c)\n",
    "    # the first column corresponds to w_0\n",
    "    W_random = np.random.rand(c)\n",
    "    X[:, 0] = np.ones(r)\n",
    "    return X, W_random\n",
    "\n",
    "X, W_random = generate_data(1000, 3)\n",
    "\n",
    "#Actual weights for the target function\n",
    "W = np.array([0.5, 0.3, -1.5])\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the function for evaluation of random function on each x_n to get the corresponding output y_n\n",
    "def give_y(X, W):\n",
    "    x_col = X.shape[0]\n",
    "    Y = np.random.rand(x_col, 1)\n",
    "    Y = np.dot(X, W)\n",
    "    Y.reshape((x_col, 1))\n",
    "    return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.         0.12035283 0.20263016]\n",
      "[ 0.5  0.3 -1.5]\n",
      "0.23216060331531058\n"
     ]
    }
   ],
   "source": [
    "Y = give_y(X, W)\n",
    "print(X[0])\n",
    "print(W)\n",
    "print(Y[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# method for transforming linearly separable data to a noisy one \n",
    "def flip_data(Y):\n",
    "    y_col = Y.shape[0]\n",
    "    i_prev = 0\n",
    "    for i in range(10, y_col, 10):\n",
    "        Y[i_prev], Y[i] = Y[i], Y[i_prev]\n",
    "        i_prev = i\n",
    "    return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_f = flip_data(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plotting the graph with given X, weights, color and label for the function\n",
    "def plot_graph(X, W, color, label):  \n",
    "    plt.plot(X[:, 1],(X[:,1]*W[1] + W[0])/((-1)*W[2]), color = color, label = label)\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "\n",
    "    \n",
    "\n",
    "#plotting points with given params:\n",
    "#X - dataSet, Y - function output values\n",
    "def plot_points(Y, X):\n",
    "    for i in range(0,len(X)):\n",
    "        if (Y[i] > 0):\n",
    "            plt.scatter(X[i, 1], X[i,2], color = 'b')\n",
    "        else:\n",
    "            plt.scatter(X[i, 1], X[i,2], color = 'r')\n",
    "            \n",
    "#predict function, computes the value of w^T x and takes the sign of it \n",
    "def predict(row, weights, sign = True):\n",
    "    activation = np.dot(row.T, weights)\n",
    "    return 1.0 if activation >= 0.0 else -1.0\n",
    "    \n",
    "\n",
    "def sign(Y):\n",
    "    return 1.0 if Y >= 0.0 else -1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_graph(X, W, 'black', 'target function with actual_w')\n",
    "plot_points(Y_f, X)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_pocket(X, W_random, Y, iter_num):\n",
    "    index = 0\n",
    "    opt_w = W_random\n",
    "    global_error = 1\n",
    "    while index<iter_num:\n",
    "        error_in = 0\n",
    "        i = 0\n",
    "        for r in X:\n",
    "            if predict(r, W_random) != sign(Y[i]):\n",
    "                W_random = W_random + sign(Y[i])*r\n",
    "                error_in += 1\n",
    "            i += 1\n",
    "        error_in /= np.size(X, 0) \n",
    "        \n",
    "        if error_in < global_error:\n",
    "            global_error = error_in\n",
    "            opt_w = W_random\n",
    "        \n",
    "        index += 1\n",
    "        \n",
    "    return opt_w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "W_pocket = train_pocket(X, W_random, Y_f, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAj0AAAD8CAYAAACcuhU5AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJztvWmUHdV1NvxUT5JaAgFXYtJwBRhNSMZYsmIx2BABVlixQ4xJaDFY8DK18+qLpzgmsLBN4I2Jhzg2ZoogNhTmw/H7xcYmBtshgAyBRJiIQUhC0AgBxowGtZik7v39uLek6uoz7HPqVNVt9X7W2kvqe+ueqU6d/dQezomICAKBQCAQCAS7OtqqboBAIBAIBAJBGRDSIxAIBAKBYFRASI9AIBAIBIJRASE9AoFAIBAIRgWE9AgEAoFAIBgVENIjEAgEAoFgVEBIj0AgEAgEglEBIT0CgUAgEAhGBYT0CAQCgUAgGBXoqKriSZMm0YwZM6qqXiAQCEYkHnzwwZeJaHLOMvbu6OhYCWAe5OVXsOtgEMCj27dvP3vBggUvqi6ojPTMmDEDq1evrqp6gUAgGJGIomhT3jI6OjpW7rvvvnMmT578Wltbm5xFJNglMDg4GL300ktzX3jhhZUAPqa6Rhi+QCAQjD7Mmzx58htCeAS7Etra2mjy5Mmvo2HBVF9TYnsEAoFA0BpoE8Ij2BXRnNdabiOkRyAQCAQCwaiAkB6BQCAQCASjAkJ6BAKBQFAqXn755favfvWruTLQuPjZz3622y9/+cvxqu/eeuut6PDDD585e/bsuf/0T/+0Z6g6b7zxxj0efPDBscnfn/70p/f/8Y9/vFuo8nV4+umnO5cuXXogANx3333jbrnllonJd5/97Gf3v/jii/cpug2+WL9+fdfBBx98iMv1V1999V6u9QjpEQgEAkGpeOWVV9qvu+66vV1+Mzg4iIGBAee67rzzzt1WrVo1QfXdfffd171t27Zo3bp1a88555zXnAvX4Mc//vEeDz/88Ljk729961vPn3jiiVtCla/DjBkztt1+++1PAcDq1au7b7vttom234xUPPHEE2NuueUWIT0CgUAg4OOss86atmjRolkh5ayzzppmqvNzn/vc1M2bN4+ZPXv23PPOO2/q66+/3rZ48eKZc+fOnTNz5sy5cRzvATTe5g888MBDTjvttOmHHHLI3CeffLLrH/7hHybNmDFj3qJFi2adcsop9TPOOGM6ADz//PMdH/nIRw6aN2/enHnz5s35xS9+MX79+vVdN9xww+Srr756n9mzZ8+9/fbbd5Cf5557ruPMM888YN26deNmz54997HHHhszZcqU+b/97W87AOCee+7pXrRo0SygYSU5+eSTZyxatGjW1KlT51966aU7CNsVV1xRmzlz5txZs2bNPfHEEw/45S9/Of5Xv/rVHhdddNHUpNyTTjppxj//8z/vCQA/+clPdpszZ87cmTNnzj355JNnvPXWWxEATJkyZf5nPvOZ/ZMxeOihh8Yigw9/+MPveeCBB8YBwJw5c+Z+/vOf3w8A/vIv/3L/b37zm5MSa8nbb78d/d3f/d3+P/3pT/dMW7Eef/zxcao+JFi5cuWeZ5999lQA+Nu//du9p06dOh8AHnvssTELFiyYpbufU6ZMmd/b2ztl/vz5c+bPnz/n0UcfHQMAGzZs6Fq8ePHMmTNnzl28ePHMJ554ogsANm/e3HHccccdNGvWrLmzZs2am7XErV27tmvOnDlz77777u7t27fjvPPOmzpv3rw5M2fOnPu1r31tEgBceOGFU1avXj1h9uzZc7/yla+wCbSV9ERRdH0URS9GUfSo5vsoiqJvR1G0MYqih6Moej+3coFAIBCMPnzjG994dtq0ae+sW7du7TXXXPNsd3f34G233bZx7dq1j999990b/uZv/mbq4OAgAODpp58ee+aZZ77y+OOPr+3q6qKvf/3r+z3wwAOPr1q1asMTTzyxgxicd9550z772c/+7tFHH338X//1X588//zzZ8yaNevdM84446Xzzz//d+vWrVu7dOnS/uT6KVOmbL/yyis3LVy4sH/dunVrDznkkHdMbd64cePYu+++e8N///d/P/71r399/3feeSdavXr12K9//ev73X333RvWr1+/9pprrnnmuOOO23rsscf+/tJLL302W+6bb74ZnXfeeQfccsstT27YsGHt9u3b8bWvfW2Hm2/SpEnb165d+/hZZ5310le/+tVhrqgjjjii/84775zw6quvtrW3t9P9998/AQDuv//+CUuWLNlhSRo7dixdcMEFz3/0ox99LW3FUvUhXf7xxx+/5f77798NAO69994Je+yxx/a+vr7OO++8c8IHP/jBfhiw++67DzzyyCOPn3feeS+uWLFiGgCcf/7505ctW/bKhg0b1v75n//5K729vTs+P+qoo7asX79+7WOPPbb2/e9//9tJOWvWrBlz0kknvee6667r+/CHP/zmt771rUkTJ04cePTRRx9fs2bN49///vcnr1u3ruuyyy57Lrl3X/rSl5QbEarA2ZzwewCuAHCD5vs/AnBwU/4AwFXNf0cebroJuPBC4JlngOnTgcsuA049tepW5cOu2CeBQBAM119//eaq2zA4OBh9+tOfnnr//fdPaGtrw4svvtj17LPPdgDAfvvt9+6SJUu2AsCqVavG/8Ef/MGWffbZZwAA/vRP//S1DRs2jAWAe++9d/cnnnhih0upv7+//bXXXgvmzTj++ON/P27cOBo3btz2vfbaa9uzzz7bcccdd+z+0Y9+9LX99ttvOwAk7dJhzZo1Y6dOnfrOe9/73ncAYPny5a9897vf3RvAiwCwbNmy1wBg0aJFb956663DYoyOPvroLf/4j/+4z4EHHvju8ccf//pdd921+5YtW9qeffbZMYceeug769ev73Ltw0EHHbQt+X769Onb33zzzbbXXnut7fnnn+86+eSTX/nFL36x269//esJH//4x39vKvuTn/zkqwBwzjnnvHrRRRdNA4CHHnpo/M9//vMnAaC3t/fVr3zlK1MB4L777tvtRz/6UR8AdHR0oFarDbz88svtr776aseJJ574nn/5l395cuHChW8DwK9+9avd161b152Mx5YtW9rXrl07tqury2vLBeuEIKJ7ALxquORPANxADdwPYI8oivbzaUyluOkm4NxzgU2bAKLGv+ee2/h8pGJX7JNAoMJNNwEzZgBtbY1/ZY6PKFxzzTV7vfLKKx2PPPLI4+vWrVtbq9W2vfXWW20A0N3dPZhcR6TXc0SE1atXP75u3bq169atW/viiy8+vOeeew5qf6BAe3s7JRampP4EY8aModR12L59e0REiKKIrXxN7QcaFhoA6OjooO3bt0fZ7z/0oQ+9+fDDD3ffc889E44++ugt8+bNe/Nb3/rWpPnz52/l1K/qQ/aaBQsWbP3ud7876aCDDnr7mGOO6V+1atWEBx98cMKxxx5rtPS0te0cLpcxSWO33XYb2G+//d696667drghiSj6xje+8UxyX5977rlHPv7xj7/hUz4QJqZnCoD0m8Kzzc9GFi68EHjzzaGfvflm4/ORil2xT4JdA2mSMmlSQ3wJi5D7EYeJEycObN26dYf+ef3119snTZq0bcyYMfTTn/50t+eff15psTjqqKO2PvDAA7u99NJL7du2bcNPfvKTHdaQI4888o3LL798R2zHfffdNw5oKNItW7a0c9o1derUd++9995uAPjhD39ozeZaunTpG7feeuteL7zwQjsA/O53v2sHgAkTJgy88cYbw/Tr+973vrefe+65riTm5YYbbqgdddRR7ADnsWPH0n777bft1ltv3fOYY47ZetRRR2357ne/u+8RRxwxjJDsvvvuA/39/c46vlnmPkcddVT/4Ycf/uZ99923W1dX12CtVjNasW644Ya9AOC6667b87DDDtsKAIcddtjWlStX7gk0iO3ChQv7AeCII47Ykrj1tm/fjldffbUNADo7O+n2229/8uabb64lmVnHHXfc61ddddXkxBX38MMPj3njjTfaJk6cONDf38+6r2mEID3DmCIAJcuLoujcKIpWR1G0+qWXXgpQdUA884zb5yMBu1qfVG/ztjd8sQC0HrIk5ZVXGuJLWITcjzjsu+++AwsWLOg/+OCDDznvvPOmnn322a+uWbNm/Lx58+bEcbzXAQcc8LbqdwcccMC2z3zmM7/9wAc+MOeII46YNXPmzLcmTpw4AADXXnvt5t/85jfjZ86cOfeggw465IorrpgMACeddNLvb7vttj2ygcwqXHzxxc9/4QtfmL5gwYJZ7e3tVmvFwoUL3/7c5z7326OOOmr2rFmz5n7qU5+aBgCnnnrqq9/+9rf3nTNnztzHHntsTHJ9d3c3XX311U+ffPLJB82cOXNuW1sbPv/5zzspw8WLF2+ZNGnS9t12223wuOOO6//d737XecwxxwwjPX/0R3+0ZcOGDeNc0/GXLFnS/8ILL3Qde+yxWzo6OrDffvu9u2jRIqOVBwDeeeed6L3vfe/sK6+8cp9vf/vbmwHgqquueubGG2+cNHPmzLk333xz7corr9zx+d13373bzJkz586bN2/ub37zmx1uyd13333wjjvu2HjFFVfsE8fxHp/5zGdenj179tvz58+fc/DBBx9yzjnn1Ldt2xYtWrTorY6ODpo1a5ZTIHNkM7cBQBRFMwD8jIiGnWcRRdE1AO4iopubf68HcDQR/dZU5sKFC6mlDhydMaOx4GZRrwNPP23+bavG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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_points(Y_f, X)\n",
    "plot_graph(X, W_pocket, 'black', \"target function with w_pocket\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_lin_reg(X, Y):\n",
    "    X_pseudo = np.dot(inv(np.dot(X.T, X)), X.T)\n",
    "    w = np.dot(X_pseudo, Y) \n",
    "    return w\n",
    "\n",
    "def error_lin_reg(X, Y, W):\n",
    "    size = X.shape[0]\n",
    "    error = 0\n",
    "    index = 0\n",
    "    for data in X:\n",
    "        error += math.pow((np.dot(W.T, X[index]) - Y[index]), 2)\n",
    "        index += 1\n",
    "    error/=size\n",
    "    return error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "W_lin = train_lin_reg(X, Y_f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.03794262837890507\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "error = error_lin_reg(X, Y_f, W_lin)\n",
    "print(error)\n",
    "plot_points(Y_f, X)\n",
    "plot_graph(X, W_lin, 'black', \"target function with w_linn\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def error_estimate(W, X, Y):\n",
    "    error = 0\n",
    "    index = 0\n",
    "    for r in X:\n",
    "        if predict(r, W) != sign(Y[index]):\n",
    "            error += 1\n",
    "        index += 1\n",
    "    error /= Y.shape[0]\n",
    "    return error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "error_pocket = error_estimate(W_pocket, X, Y_f)\n",
    "error_lin = error_estimate(W_lin, X, Y_f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.095 0.068\n"
     ]
    }
   ],
   "source": [
    "print(error_pocket, error_lin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "errors_pocket = []\n",
    "errors_lin = []\n",
    "index_array = []\n",
    "index = 0\n",
    "\n",
    "while index < 100:\n",
    "    # Generate the test_set of 1000 elements\n",
    "    X, W_random = generate_data(1000, 3)\n",
    "    Y = give_y(X, W)\n",
    "    # Make the test data set to be a little bit noisy\n",
    "    Y_f = flip_data(Y)\n",
    "    W_pocket = train_pocket(X, W_random, Y_f, 50)\n",
    "    W_lin = train_lin_reg(X, Y_f)\n",
    "    error_pocket = error_estimate(W_pocket, X, Y_f)\n",
    "    error_lin = error_estimate(W_lin, X, Y_f)\n",
    "    errors_pocket.append(error_pocket)\n",
    "    errors_lin.append(error_lin)\n",
    "    index_array.append(index)\n",
    "    index += 1\n",
    "\n",
    "plt.plot(index_array,errors_pocket, color = \"blue\", label = \"E_test_w_pocket\")\n",
    "plt.plot(index_array,errors_lin, color = \"red\", label = \"E_test_w_lin\")\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Recommended algorithm\n",
    "After the conduction of the same experiment 100 times, it is clearly seen that almost in all iterations, error of pocket algorithm is much higher than the one which was produced by linear regression model. One of the possible reasons can be a relatively low number of iterations that was applied for pocket algorithm. However, due to the fact that the number of iterations for pocket algorithm is unknown, it may always lead to a high computation cost as this parameter can be always fixed to a relatively high number. In comparison to pocket algorithm, linear regression model estimates the best possible weights by taking only one learning step. Thus, in terms of efficiency and stability, the linear algorithms is preffered over the pocket algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gradient Descent for Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "data = load_iris()\n",
    "\n",
    "# getting only setosa and versicolor data (first 100)\n",
    "X = data.data[:100]\n",
    "Y = data.target[:100]\n",
    "\n",
    "# getting only two features for visualization\n",
    "X_2d = X[:,[0, 1, 2]]\n",
    "X_2d[:, 0] = np.ones(100)\n",
    "# replacing class 0 with -1\n",
    "Y[Y == 0] = -1\n",
    "\n",
    "Y = Y.astype(float)\n",
    "\n",
    "# Splitting iris_data set on 80% train set and 20% test set \n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X_2d, Y, test_size = 0.2, stratify = Y, random_state = 12, shuffle = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def sigmoid(x):\n",
    "    y = 1 / (1 + math.exp(-x))\n",
    "    return 1 if y >= 0.5 else -1\n",
    "\n",
    "# returns the matrix of Y with given values of X and W\n",
    "def give_y_log(X, W):\n",
    "    global sigmoid\n",
    "    x_col = X.shape[0]\n",
    "    Y = np.random.rand(x_col, 1)\n",
    "    Y = np.dot(X, W)\n",
    "    Y_res = map(sigmoid, Y)\n",
    "    return list(Y_res)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# model for Logistic_regression\n",
    "\n",
    "class Logistic_regression:\n",
    "    \n",
    "    def _init_():\n",
    "        self.W = None\n",
    "    \n",
    "    # l_r - learning_rate, T - number of steps for gradient descent\n",
    "    def fit(self, X, Y, T, l_r):\n",
    "        self.W = np.random.rand(X.shape[1])\n",
    "        data_size = len(Y)\n",
    "        for t in range(T):\n",
    "            index = random.randint(0, data_size - 1)\n",
    "            de_dw = (-2)*((Y[index])*X[index])/(1 + math.exp(Y[index]*np.dot(self.W.T, X[index])))\n",
    "            self.W = self.W - l_r * de_dw\n",
    "            \n",
    "    def plot(self, X, Y):\n",
    "        plt.plot(X[:,1],(X[:,1]*self.W[1] + self.W[0])/((-1)*self.W[2]), color = 'black', label = \"Hypothesis\")\n",
    "        plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "        \n",
    "        for i in range(0,len(X)):\n",
    "            if (Y[i] > 0.5):\n",
    "                plt.scatter(X[i, 1], X[i,2], color = 'b')\n",
    "            else:\n",
    "                plt.scatter(X[i, 1], X[i,2], color = 'r')\n",
    "                \n",
    "    # method for finding the overall error of the model \n",
    "    def error(self, X, Y):\n",
    "        size = len(Y)\n",
    "        error = 0\n",
    "        index = 0\n",
    "        for data in X:\n",
    "            error += math.log(1 + math.exp(-Y[index]*np.dot(self.W.T,X[index])))\n",
    "            index += 1\n",
    "        error /= size\n",
    "        return error\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "log_reg = Logistic_regression()\n",
    "log_reg.fit(X_train, Y_train, 1000, 0.1)\n",
    "log_reg.plot(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "error_test = log_reg.error(X_test, Y_test)\n",
    "error_in = log_reg.error(X_train, Y_train)\n",
    "\n",
    "def plot_line(data1, data2, index, label1, label2):\n",
    "    plt.plot(index, data1, label = label1)\n",
    "    plt.plot(index, data2, label = label2)\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "\n",
    "def generate_data(X_train, Y_train, X_test, Y_test):\n",
    "    errors_test = []\n",
    "    errors_in = []\n",
    "    T = 2000\n",
    "    for t in range(100, T, 100):\n",
    "        log_reg = Logistic_regression()\n",
    "        log_reg.fit(X_train, Y_train, T, 0.001)\n",
    "        \n",
    "        error_test = log_reg.error(X_test, Y_test)\n",
    "        error_in = log_reg.error(X_train, Y_train)\n",
    "        \n",
    "        errors_test.append(error_test)\n",
    "        errors_in.append(error_in)\n",
    "    return errors_test, errors_in\n",
    "\n",
    "errors_test, errors_in = generate_data(X_train, Y_train, X_test, Y_test)\n",
    "indexes = list(range(100, 2000, 100))\n",
    "plot_line(errors_test, errors_in, indexes, \"Error_test\", \"Error_train\")\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Findings\n",
    "\n",
    "From the graph above, it is clear that generally Error_test and Error_train descreases as the number of iteration steps increases. The reason of sharp increase and decrease in some value of T can be explained by the fact that during the learning, the stochastic gradient was applied in which random samples were used during gradient descent. However, the convergence of error happens at 1100th step, which implies that after this point, the error steps out from the absolute minimum. Moreover, the linearity of the data_set can be the cause of little difference between Error_test and Error_train. In fact, the whole data set itself is linearly seperable, and therefore validation data is expected to be also linearly separable. Thus, validation error or test error is similar to the in_sample error. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Implement SVM using quadratic programming package"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 1:** Load Iris dataset from sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['setosa' 'versicolor' 'virginica']\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import numpy as np\n",
    "\n",
    "data = load_iris()\n",
    "\n",
    "# getting only setosa and versicolor data (first 100)\n",
    "X = data.data[:100]\n",
    "y = data.target[:100]\n",
    "print(data.target_names)\n",
    "\n",
    "# getting only two features for visualization\n",
    "feature_x = 0\n",
    "feature_y = 1\n",
    "X_2d = X[:,[feature_x, feature_y]]\n",
    "\n",
    "# replacing class 0 with -1\n",
    "y[y == 0] = -1\n",
    "\n",
    "y = y.astype(float)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_2d, y, test_size = 0.2, stratify = y, random_state = 12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 2:** Created Primal SVM classifier\n",
    "\n",
    "**Used QP solver**\n",
    "\n",
    "**cvxopt.solver.qp(P, q, G, h, A, b)** function is quadratic programming solver which returns **u** according to following equations:<br><br>\n",
    "<center><font size = \"4\">\n",
    "    $minimize(u)\\quad\\frac{1}{2} u^T u + q^T u$<br><br>\n",
    "    $subject \\; to \\quad Gx \\leq h,$<br>\n",
    "    $\\qquad\\qquad Ax = b$\n",
    "    \n",
    "</font><center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import necessary modules from cvxopt\n",
    "from cvxopt import matrix as cvxopt_matrix\n",
    "from cvxopt import solvers as cvxopt_solvers\n",
    "cvxopt_solvers.options['show_progress'] = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Primal SVM classifier\n",
    "class PrimalSVM:\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.w = None\n",
    "        self.b = None\n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        \n",
    "        N, d = np.shape(X)\n",
    "        \n",
    "        Q = np.zeros((d+1, d+1))\n",
    "        Q[1:, 1:] = np.identity(d)\n",
    "        \n",
    "        P = cvxopt_matrix(Q)\n",
    "        q = cvxopt_matrix(np.zeros((d+1, )))\n",
    "        h = cvxopt_matrix(-np.ones(N,))\n",
    "        G = cvxopt_matrix(-np.insert(X, 0, np.ones((N,)), axis = 1) * np.reshape(y, (-1, 1)))\n",
    "        \n",
    "        #use QP solver\n",
    "        ans = cvxopt_solvers.qp(P, q, G, h)\n",
    "        \n",
    "        #extract b and w\n",
    "        self.b = ans['x'][0]\n",
    "        self.w = np.array(ans['x'][1:])\n",
    "        \n",
    "    def predict(self, X):\n",
    "        y = np.matmul(X, self.w) + self.b\n",
    "        y[ y < 0] = -1\n",
    "        y[ y > 0] = 1\n",
    "        return y\n",
    "    \n",
    "    def visualize(self, feature_x = 0, feature_y = 1):\n",
    "        xx = np.linspace(4, 7, 100)\n",
    "        yy = -(self.w[feature_x] * xx + self.b) / self.w[feature_y]\n",
    "        plt.plot(xx, yy, label = \"decision boundary\")\n",
    "        dist = 1 / np.linalg.norm(self.w)\n",
    "        #print(dist)\n",
    "        yy_upper = yy + dist\n",
    "        plt.plot(xx, yy_upper, label =\"upper margin\")\n",
    "        \n",
    "        yy_lower = yy -  dist\n",
    "        plt.plot(xx, yy_lower, label = \"lower margin\")\n",
    "        plt.legend()\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 3:** Checking the accuracy of the classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 1.0\n",
      "Test score: 1.0\n"
     ]
    }
   ],
   "source": [
    "svm = PrimalSVM()\n",
    "svm.fit(X_train, y_train)\n",
    "#train accuracy\n",
    "y_pred = svm.predict(X_train)\n",
    "print(\"Train score: {}\".format(accuracy_score(y_pred, y_train)))\n",
    "#test accuracy\n",
    "y_pred = svm.predict(X_test)\n",
    "print(\"Test score: {}\".format(accuracy_score(y_pred, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 4:** Visualization of decision boundary and margins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train[y_train == 1, 0], X_train[y_train == 1, 1], c = 'blue', label = \"Versicolor\")\n",
    "plt.scatter(X_train[y_train == -1, 0], X_train[y_train == -1, 1], c = 'red', label = \"Setosa\")\n",
    "\n",
    "svm.visualize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 5:** Creating **Dual SVM** classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#DualSVM classifier\n",
    "class DualSVM:\n",
    "    def __init__(self):\n",
    "        self.w = None\n",
    "        self.b = None\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        \n",
    "        N, d = np.shape(X)\n",
    "        \n",
    "        \n",
    "        P = np.zeros((N, N))\n",
    "        \n",
    "        for i in range(N):\n",
    "            for j in range(N):\n",
    "                P[i][j] = y[i] * y[j] * np.dot(X[i], X[j])\n",
    "                \n",
    "        P = cvxopt_matrix(P)   \n",
    "        q = cvxopt_matrix(-np.ones((N, )))\n",
    "        G = cvxopt_matrix(-np.identity(N)) \n",
    "        h = cvxopt_matrix(np.zeros((N, )))\n",
    "        A = cvxopt_matrix(y.reshape(1, -1))\n",
    "        b = cvxopt_matrix(np.zeros(1))\n",
    "        \n",
    "        #use QP solver\n",
    "        ans = cvxopt_solvers.qp(P, q, G, h, A, b)\n",
    "        \n",
    "        #extract alpha\n",
    "        alpha = np.array(ans['x']).flatten()\n",
    "        \n",
    "        #compute w and b form a\n",
    "        self.w = np.matmul((alpha * y).T, X)\n",
    "        SV_idx = np.array(range(N))[alpha > 1e-7]\n",
    "        rand_sv = SV_idx[0]\n",
    "        self.b = y[rand_sv]  - np.matmul(self.w.T, X[rand_sv])\n",
    "        \n",
    "        #find Support Vectors\n",
    "        self.SV = X[alpha > 1e-7]\n",
    "        \n",
    "    def SV(self):\n",
    "        return self.SV\n",
    "        \n",
    "    def predict(self, X):\n",
    "        y = np.matmul(X, self.w) + self.b\n",
    "        y[ y < 0] = -1\n",
    "        y[ y > 0] = 1\n",
    "        return y\n",
    "    \n",
    "    def visualize(self, feature_x = 0, feature_y = 1):\n",
    "        xx = np.linspace(4, 7, 100)\n",
    "        yy = -(self.w[feature_x] * xx + self.b) / self.w[feature_y]\n",
    "        plt.plot(xx, yy, label = \"decision boundary\")\n",
    "        plt.legend()\n",
    "        plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Checking the accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 1.0\n",
      "Test score: 1.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "dual_svm = DualSVM()\n",
    "dual_svm.fit(X_train, y_train)\n",
    "\n",
    "y_pred = dual_svm.predict(X_train)\n",
    "print(\"Train score: {}\".format(accuracy_score(y_pred, y_train)))\n",
    "#test accuracy\n",
    "y_pred = dual_svm.predict(X_test)\n",
    "print(\"Test score: {}\".format(accuracy_score(y_pred, y_test)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part 6:** Visualizaion of support vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_svm = dual_svm.SV\n",
    "\n",
    "plt.scatter(X_train[y_train == 1, 0], X_train[y_train == 1, 1], c = 'blue', label = \"Versicolor\")\n",
    "plt.scatter(X_train[y_train == -1, 0], X_train[y_train == -1, 1], c = 'red', label = \"Setosa\")\n",
    "\n",
    "plt.scatter(X_svm[:, 0], X_svm[:, 1], c = 'green', label = \"Support Vectors\")\n",
    "dual_svm.visualize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Practical design of a learning algorithm (Task 0 and Task 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets \n",
    "digits = datasets.load_digits()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# divide the data_set on m/n size \n",
    "def split_data(digits, n):\n",
    "    data = digits.data\n",
    "    target = digits.target\n",
    "    m = data.shape[0]\n",
    "    set_size = m/n\n",
    "    f_size = data.shape[1]\n",
    "    \n",
    "    disjoint_sets = []\n",
    "    disjoint_labels = []\n",
    "    \n",
    "    index = 0\n",
    "    i = 0\n",
    "    \n",
    "    one_set = np.zeros((int(set_size) + 1, int(f_size)))\n",
    "    one_set_label = []#np.zeros((int(set_size) + 1, 1))\n",
    "    \n",
    "    for elem in data:\n",
    "        if i == m - 1:\n",
    "            disjoint_sets.append(one_set)\n",
    "            disjoint_labels.append(one_set_label)\n",
    "            \n",
    "        if index > int(m/n):\n",
    "            disjoint_sets.append(one_set)\n",
    "            disjoint_labels.append(one_set_label)\n",
    "\n",
    "            if (len(disjoint_sets) == n - 1):\n",
    "                one_set = np.zeros((int(m) - (int(set_size) + 1)*(n-1),int(f_size)))\n",
    "                one_set_label = []#np.zeros((int(m) - (int(set_size) + 1)*(n-1),1))\n",
    "            else:\n",
    "                one_set = np.zeros((int(set_size) + 1, int(f_size)))\n",
    "                one_set_label = []#np.zeros((int(set_size) + 1, 1))\n",
    "            index = 0\n",
    "        \n",
    "        one_set[index] = elem\n",
    "        one_set_label.append(target[i])\n",
    "        index += 1\n",
    "        i += 1\n",
    "    return disjoint_sets, disjoint_labels  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "disjoint_data, disjoint_labels = split_data(digits, 10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for merging matrices/arrays\n",
    "# e_index - index of an element which will not be included in the final matrice/array\n",
    "def merge_sets(dis_data, dis_label, not_index):\n",
    "    index = 0\n",
    "    x_train_set = None\n",
    "    y_train_set = None\n",
    "    \n",
    "    x_test_set = None \n",
    "    y_test_set = None\n",
    "    \n",
    "    is_init = False\n",
    "    \n",
    "    for elem in dis_data:\n",
    "         \n",
    "        if not is_init and index != not_index:\n",
    "            x_train_set = elem\n",
    "            y_train_set = dis_label[index]\n",
    "            index += 1\n",
    "            is_init = True\n",
    "            continue\n",
    "            \n",
    "        if index == not_index:\n",
    "            x_test_set = elem\n",
    "            y_test_set = dis_label[index]\n",
    "            index += 1\n",
    "            continue\n",
    "        \n",
    "        x_train_set = np.concatenate((x_train_set, elem), axis = 0)\n",
    "        y_train_set = y_train_set + dis_label[index]\n",
    "\n",
    "        index += 1\n",
    "        \n",
    "    return x_train_set, x_test_set, y_train_set, y_test_set\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# method which recognizes 5 to be +1, otherwise to be -1 \n",
    "def is_five(x):\n",
    "    return +1 if (x == 5) else -1\n",
    "\n",
    "# V_fold validation function, outputs the average error of both logistic and linear regression models \n",
    "def train_v_fold(dis_data, dis_label):\n",
    "    global is_one\n",
    "    \n",
    "    v = len(dis_data)\n",
    "    \n",
    "    average_error_log = 0\n",
    "    average_error_lin = 0\n",
    "    \n",
    "    for i in range(v):\n",
    "        \n",
    "        log_model = Logistic_regression()\n",
    "        X_train, X_test, Y_train, Y_test = merge_sets(disjoint_data, disjoint_labels, i)\n",
    "                \n",
    "        Y_test = np.array(Y_test)\n",
    "        Y_train = np.array(Y_train)\n",
    "        \n",
    "        # Since in digit dataset, there are 10 possible outcomes, the 5 and 7 outcomes were chosen to perform \n",
    "        # binary classifacation\n",
    "        \n",
    "        X_train = X_train[np.logical_or(Y_train == 5, Y_train == 7)]\n",
    "        X_test = X_test[np.logical_or(Y_test == 5, Y_test == 7)]\n",
    "\n",
    "        Y_test = Y_test[np.logical_or(Y_test == 5, Y_test == 7)]\n",
    "        Y_train = Y_train[np.logical_or(Y_train == 5, Y_train == 7)]\n",
    "                       \n",
    "        Y_train = list(map(is_five, Y_train))\n",
    "        Y_test = list(map(is_five, Y_test))\n",
    "        \n",
    "        log_model.fit(X_train, Y_train, 2000, 0.01)\n",
    "        error_log = log_model.error(X_test, Y_test)\n",
    "        \n",
    "        X_pseudo = pinv(X_train)\n",
    "        W_lin = np.dot(X_pseudo, Y_train) \n",
    "        \n",
    "        error_lin = error_lin_reg(X_test, Y_test, W_lin)\n",
    "        \n",
    "        average_error_log += error_log\n",
    "        average_error_lin += error_lin\n",
    "        \n",
    "    average_error_log /= v\n",
    "    average_error_lin /= v\n",
    "    \n",
    "    return average_error_log, average_error_lin\n",
    "\n",
    "# rouding the number to two decimal\n",
    "def r(x):\n",
    "    return round(x, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average error of logistic reg and lin reg in 5 fold validation:  0.32 0.1\n",
      "Average accuracy of logistic reg and lin reg in 5 fold validation:  67.79% 89.94%\n"
     ]
    }
   ],
   "source": [
    "# Average error for 5 fold validation \n",
    "disjoint_data, disjoint_labels = split_data(digits, 5)\n",
    "aver_error_log, aver_error_lin = train_v_fold(disjoint_data, disjoint_labels)\n",
    "print(\"Average error of logistic reg and lin reg in 5 fold validation: \",r(aver_error_log), r(aver_error_lin))\n",
    "print(\"Average accuracy of logistic reg and lin reg in 5 fold validation: \",\"{}%\".format(r(100 - aver_error_log*100)), \"{}%\".format(r(100 - aver_error_lin*100)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average error of logistic reg and lin reg in 10 fold validation:  0.19 0.09\n",
      "Average accuracy of logistic reg and lin reg in 10 fold validation:  80.93% 90.92%\n"
     ]
    }
   ],
   "source": [
    "# Average error for 10 fold validation\n",
    "disjoint_data, disjoint_labels = split_data(digits, 10)\n",
    "aver_error_log, aver_error_lin = train_v_fold(disjoint_data, disjoint_labels)\n",
    "print(\"Average error of logistic reg and lin reg in 10 fold validation: \",r(aver_error_log), r(aver_error_lin))\n",
    "print(\"Average accuracy of logistic reg and lin reg in 10 fold validation: \",\"{}%\".format(r(100 - aver_error_log*100)), \"{}%\".format(r(100 - aver_error_lin*100)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average error of logistic reg and lin reg in 20 fold validation:  0.07 0.06\n",
      "Average accuracy of logistic reg and lin reg in 20 fold validation:  93.31% 93.73%\n"
     ]
    }
   ],
   "source": [
    "# Average error for 20 fold validation \n",
    "disjoint_data, disjoint_labels = split_data(digits, 20)\n",
    "aver_error_log, aver_error_lin = train_v_fold(disjoint_data, disjoint_labels)\n",
    "print(\"Average error of logistic reg and lin reg in 20 fold validation: \",r(aver_error_log), r(aver_error_lin))\n",
    "print(\"Average accuracy of logistic reg and lin reg in 20 fold validation: \",\"{}%\".format(r(100 - aver_error_log*100)), \"{}%\".format(r(100 - aver_error_lin*100)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average error of logistic reg and lin reg in 100 fold validation:  0.05 0.05\n",
      "Average accuracy of logistic reg and lin reg in 100 fold validation:  95.44% 94.51%\n"
     ]
    }
   ],
   "source": [
    "# Average error for 100 fold validation was selected since computation cost for loocv (1797 sample size) is very high  \n",
    "disjoint_data, disjoint_labels = split_data(digits, 100)\n",
    "aver_error_log, aver_error_lin = train_v_fold(disjoint_data, disjoint_labels)\n",
    "print(\"Average error of logistic reg and lin reg in 100 fold validation: \",r(aver_error_log), r(aver_error_lin))\n",
    "print(\"Average accuracy of logistic reg and lin reg in 100 fold validation: \",\"{}%\".format(r(100 - aver_error_log*100)), \"{}%\".format(r(100 - aver_error_lin*100)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The performance of Linear and Logistic Regression \n",
    "\n",
    "It is observed that error of test sample for both models decreases as the parameter (for v_fold validation) increases. It can be expalined by the fact that increasing the v parameter, the model is tested on less number of samples thereby giving less error score. At the same time, it is trained on bigger data_set which always intends to a decrease in out_of_sample error. Moreover, the performance of linear regression is much higher than the logistic regression does in 5 fold and 10 fold validation. Possibly, the reason can be in number of iteration steps in gradient descent, and choice of stochastic gradient descent where the derivative depends only on one random sample. However, after taking more validation size, the logistic regression model performs much better than linear one since the train_data was increased, which helped for better convergence.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing necessary modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import validation_curve, cross_val_score\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loading **digits dataset**. And creating function **plot_validation_curve**, to plot validation curve for values of C (Regularization parameter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "digits = datasets.load_digits()\n",
    "X = digits.data\n",
    "y = digits.target\n",
    "\n",
    "def plot_validation_curve(C_vals, train_score, val_score):\n",
    "    #print(C_vals)\n",
    "    # plt.plot(C_vals, np.mean(train_score, 1), color='blue', label='training score')\n",
    "    # plt.plot(C_vals, np.mean(val_score, 1), color='red', label='validation score')\n",
    "    plt.semilogx(C_vals, np.mean(train_score, 1), label=\"Training score\",color=\"blue\", lw = 2)\n",
    "    plt.semilogx(C_vals, np.mean(val_score, 1), label=\"Validation score\",color=\"red\", lw = 2)\n",
    "    plt.legend(loc='best')\n",
    "    plt.ylim(0.8, 1.04)\n",
    "    plt.xlabel('C')\n",
    "    plt.ylabel('score');\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Ridege Classifier** (Ridge Classifier is Linear Regression classifier with regularization)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import RidgeClassifier\n",
    "\n",
    "\n",
    "C_vals = np.logspace(-5, 2, num = 8)\n",
    "\n",
    "train_score, val_score = validation_curve(RidgeClassifier(), X, y,'alpha', 1/C_vals, cv = 10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEOCAYAAAB4nTvgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzt3Xl8VPW9//HXJ2EJsiqgXkEWvVqBECBGLIosVijy8xbFBWm1IgqCy63X4k9tvdVLb5VaF9wQteJCUSreqvwUH2hVKl6rEJagohQQrBFqKVjWsIR8fn+cSRhCkjMDOZmZ8H4+HufBnHU+c5LMm+9ZvsfcHRERkZpkpboAERFJfwoLEREJpbAQEZFQCgsREQmlsBARkVAKCxERCaWwEBGRUAoLEREJpbAQEZFQCgsREQnVINUF1JY2bdp4p06dUl2GiEhGWbRo0T/cvW3YcvUmLDp16kRhYWGqyxARyShm9mUiy+kwlIiIhFJYiIhIKIWFiIiEqjfnLESk9u3Zs4fi4mJ27tyZ6lLkEOXk5NC+fXsaNmx4UOsrLESkWsXFxTRv3pxOnTphZqkuRw6Su7Nx40aKi4vp3LnzQW1Dh6FEpFo7d+6kdevWCooMZ2a0bt36kFqICgsRqZGCon441J+jwkJE0tbGjRvp2bMnPXv25Nhjj6Vdu3YV47t3705oG1deeSUrVqyocZlHH32UGTNm1EbJ9ZbOWYhI2mrdujVLly4F4M4776RZs2ZMmDBhv2XcHXcnK6vq//s+/fTToe9z3XXXHXqxEQj7bHUp9RWIiCRp1apV5ObmMm7cOPLz81m/fj1jx46loKCAbt26MXHixIpl+/bty9KlSyktLaVVq1bceuut9OjRgz59+vD3v/8dgNtvv53JkydXLH/rrbfSu3dvvvOd7/DBBx8AsH37di688EJ69OjByJEjKSgoqAiyeDfffDNdu3YlLy+PW265BYC//e1vDBs2jLy8PHr06MFHH30EwD333ENubi65ubk8/PDD1X62N954gz59+pCfn8+IESPYvn17dDu3GgoLEUmIWTTDwVq+fDlXXXUVS5YsoV27dkyaNInCwkKKiop46623WL58+QHrbN68mf79+1NUVESfPn2YNm1aldt2dxYsWMBvfvObiuB5+OGHOfbYYykqKuLWW29lyZIlB6z3zTffMGfOHD799FOWLVvGbbfdBgQtl0GDBrFs2TIWLVpEly5dWLBgATNmzGDBggX8+c9/ZsqUKSxbtuyAz9awYUMmTZrE22+/zeLFi8nLy+PBBx88+B13kBQWIpKRTjzxRE477bSK8RdeeIH8/Hzy8/P57LPPqgyLJk2acO655wJw6qmnsnbt2iq3PXz48AOWef/997n00ksB6NGjB926dTtgvaOOOoqsrCzGjBnDyy+/TNOmTQGYN28e11xzDQANGjSgRYsWzJ8/nwsvvJAjjjiC5s2bc/755/P+++8f8Nk++OADli9fzhlnnEHPnj2ZMWNGtXVHSecsRCQh7qmuYH/lX8QAK1eu5MEHH2TBggW0atWKyy67rMrLRBs1alTxOjs7m9LS0iq33bhx4wOW8QR2QMOGDSksLOStt95i5syZPPbYY7z55pvAgVcj1bS9+M/m7gwZMoTp06eHvn+U1LIQkYy3ZcsWmjdvTosWLVi/fj1z586t9ffo27cvL774IgAff/xxlS2XrVu3smXLFs477zweeOCBikNVAwcOZOrUqQDs3buXLVu20K9fP15++WVKSkrYtm0br776KmedddYB2zzjjDP405/+xBdffAEE505WrlxZ658vjFoWIpLx8vPz6dq1K7m5uZxwwgmceeaZtf4eN9xwAz/+8Y/Jy8sjPz+f3NxcWrZsud8ymzdvZvjw4ezatYuysjLuv/9+AB555BHGjBnD448/ToMGDXj88cfp3bs3I0eOrDjcNH78eLp3786qVav22+YxxxzDU089xYgRIyouF77rrrs46aSTav0z1sQSaVplgoKCAtfzLERq12effUaXLl1SXUZaKC0tpbS0lJycHFauXMngwYNZuXIlDRpkzv+5q/p5mtkidy8IWzdzPqWISApt27aN733ve5SWluLuFa2Ew8Xh80lFRA5Bq1atWLRoUarLSBmd4BYRkVAKCxERCaWwEBGRUAoLEREJpbAQkbQ1YMCAA26wmzx5Mtdee22N6zVr1gyAdevWcdFFF1W77bDL7SdPnsyOHTsqxocOHco///nPREqvdxQWIpK2Ro4cycyZM/ebNnPmTEaOHJnQ+scddxwvvfTSQb9/5bCYM2cOrVq1OujtRWXv3r2Rv4fCQkTS1kUXXcRrr73Grl27AFi7di3r1q2jb9++Ffc95Ofn0717d1599dUD1l+7di25ubkAlJSUcOmll5KXl8eIESMoKSmpWG78+PEV3ZvfcccdADz00EOsW7eOgQMHMnDgQAA6derEP/7xDwDuv//+iu7Fy7s3X7t2LV26dGHMmDF069aNwYMH7/c+5WbNmkVubi49evSgX79+QPCFP2HCBLp3705eXl5Fl+Vvv/02vXr1onv37owePbpiX3Tq1ImJEyfSt29fZs2axerVqxkyZAinnnoqZ511Fp9//vmh/wDilT9cI9OHU0891UWkdi1fvnzfSNCXYO0PIYYOHeqvvPKKu7vffffdPmHCBHd337Nnj2/evNnd3Tds2OAnnniil5WVubt706ZN3d19zZo13q1bN3d3v++++/zKK690d/eioiLPzs72hQsXurv7xo0b3d29tLTU+/fv70VFRe7u3rFjR9+wYUNFLeXjhYWFnpub69u2bfOtW7d6165dffHixb5mzRrPzs72JUuWuLv7xRdf7NOnTz/gM+Xm5npxcbG7u3/77bfu7j5lyhQfPny479mzp6KmkpISb9++va9YscLd3S+//HJ/4IEHKmr59a9/XbHNs88+2//yl7+4u/uHH37oAwcOPOB99/t5xgCFnsB3rFoWIpLW4g9FxR+Ccnd+9rOfkZeXxznnnMPXX3/NN998U+123nvvPS677DIA8vLyyMvLq5j34osvkp+fT69evfj000+r7CQw3vvvv88FF1xA06ZNadasGcOHD2f+/PkAdO7cmZ49ewLVd4N+5plnMmrUKJ588smKQ0h//OMfGTduXMVd4UcddRQrVqygc+fOnHzyyQBcccUVvPfeexXbGTFiBBDcXf7BBx9w8cUX07NnT6655hrWr19f42dIlu7gFpHEpKgfufPPP5+bbrqJxYsXU1JSQn5+PgAzZsxgw4YNLFq0iIYNG9KpU6cquyWPV7mbcIA1a9Zw7733snDhQo488khGjRoVuh2vYV+Ud28OQRfnVR2Gmjp1Kh999BGvv/46PXv2ZOnSpbh7Ut2Yw76uzMvKymjVqlWVT+6rLWpZiEhaa9asGQMGDGD06NH7ndjevHkzRx99NA0bNuTdd9/lyy+/rHE7/fr1Y8aMGQB88sknFU+l27JlC02bNqVly5Z88803vPHGGxXrNG/enK1bt1a5rVdeeYUdO3awfft2Xn755Sq7F6/O6tWrOf3005k4cSJt2rThq6++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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best score of Linear SVM is : 0.9152037502476389\n"
     ]
    }
   ],
   "source": [
    "plot_validation_curve(C_vals, train_score, val_score)\n",
    "print(\"The best score of Linear SVM is : {}\".format(np.mean(val_score, 1)[4]) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best value of C is $10^{-1}$, because the smaller value of C (smaller than $10^{-1}$) underfits (poor validation score), while bigger value overfits (bigger difference between training and validation score) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Logistic Regression**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "\n",
    "C_vals = np.logspace(-5, 2, num = 8)\n",
    "\n",
    "train_score, val_score = validation_curve(LogisticRegression(solver = 'liblinear', multi_class = 'auto'), X, y,'C', C_vals, cv = 10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best score of Logistic Regression is : 0.9342244442131087\n"
     ]
    }
   ],
   "source": [
    "plot_validation_curve(C_vals, train_score, val_score)\n",
    "print(\"The best score of Logistic Regression is : {}\".format(np.mean(val_score, 1)[2]) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best value of C is $10^{-3}$, because the smaller value of C (smaller than $10^{-3}$) underfits (poor validation score), while bigger value overfits (bigger difference between training and validation score) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Linear SVM**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "c:\\python\\lib\\site-packages\\sklearn\\svm\\base.py:922: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import LinearSVC\n",
    "\n",
    "C_vals = np.logspace(-5, 2, num = 8)\n",
    "\n",
    "train_score, val_score = validation_curve(LinearSVC(), X, y,'C', C_vals, cv = 10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best score of Linear SVM is : 0.9381052650486321\n"
     ]
    }
   ],
   "source": [
    "plot_validation_curve(C_vals, train_score, val_score)\n",
    "print(\"The best score of Linear SVM is : {}\".format(np.mean(val_score, 1)[1]) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best value of C is $10^{-4}$, because the smaller value of C (smaller than $10^{-4}$) underfits (poor validation score), while bigger value overfits (bigger difference between training and validation score) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "\n",
    "C_vals = np.logspace(-7, -2, num = 6)\n",
    "\n",
    "train_score, val_score = validation_curve(SVC(kernel = \"poly\", gamma = 'auto'), X, y,'C', C_vals, cv = 10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best score of polynomial kernel SVM is : 0.97886432558319\n"
     ]
    }
   ],
   "source": [
    "plot_validation_curve(C_vals, train_score, val_score)\n",
    "print(\"The best score of polynomial kernel SVM is : {}\".format(np.mean(val_score, 1)[4]) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The optimal value of C is $10^{-4}$ or more, because the smaller value of C (smaller than $10^{-4}$) underfits (poor validation score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Best Model Selection\n",
    "The final selected model is Polynomial Kernel SVM with reguralization parameter C = $10^{-4}$ . \n",
    "\n",
    "**Methodology of selection:** For each model we have chosen the optimal parameter C, such that each model didn't have high bias and high varriance. Then we compared each model with optimal parameters and selected the one which gives the highest accuracy (Polynomial kernel SVM validation score: 97.89%)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
